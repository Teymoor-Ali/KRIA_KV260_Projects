-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_demosaic_0_0_ZipperRemoval_Pipeline_VITIS_LOOP_1101_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgRgb_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    imgRgb_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgRgb_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgRgb_empty_n : IN STD_LOGIC;
    imgRgb_read : OUT STD_LOGIC;
    imgUnzip_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    imgUnzip_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgUnzip_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgUnzip_full_n : IN STD_LOGIC;
    imgUnzip_write : OUT STD_LOGIC;
    p_0_0_0477655_lcssa668693 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0478653_lcssa666691 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0479657_lcssa664689 : IN STD_LOGIC_VECTOR (9 downto 0);
    conv2_i_i_lcssa687 : IN STD_LOGIC_VECTOR (6 downto 0);
    loopWidth : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln1085 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_0480_1667_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0480_1667_out_ap_vld : OUT STD_LOGIC;
    p_0_0_0481_1665_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0481_1665_out_ap_vld : OUT STD_LOGIC;
    p_0_0_0482_1663_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0482_1663_out_ap_vld : OUT STD_LOGIC;
    p_0_0_0480_1661_out_i : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0480_1661_out_o : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0480_1661_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0_0481_1660_out_i : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0481_1660_out_o : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0481_1660_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0_0482_1659_out_i : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0482_1659_out_o : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0482_1659_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0_0483_1658_out_i : IN STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0483_1658_out_o : OUT STD_LOGIC_VECTOR (9 downto 0);
    p_0_0_0483_1658_out_o_ap_vld : OUT STD_LOGIC;
    phi_ln1132_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    phi_ln1132_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of design_1_v_demosaic_0_0_ZipperRemoval_Pipeline_VITIS_LOOP_1101_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1101_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1107_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op40_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1159_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_726_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1101_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgRgb_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgUnzip_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1101_reg_718_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1107_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_0_0482_1663_load_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0482_1663_load_reg_730_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0481_1665_load_reg_738 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0481_1665_load_reg_738_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0480_1667_load_reg_746 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0480_1667_load_reg_746_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal r_s_reg_754 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_s_reg_759 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_s_reg_764 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1144_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1144_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal zext_ln1101_fu_297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1_fu_407_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_110 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal x_2_fu_223_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_0_0_0483_1662_fu_114 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal p_0_0_0482_1663_fu_118 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal p_0_0_0481_1665_fu_122 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal trunc_ln1109_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0480_1667_fu_126 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal imgRgb_read_local : STD_LOGIC;
    signal or_ln1161_3_fu_653_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal imgUnzip_write_local : STD_LOGIC;
    signal zext_ln1085_cast_fu_179_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_329_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1129_1_fu_343_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln1129_2_fu_357_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_371_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1129_4_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1129_1_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1129_fu_385_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1129_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1129_2_fu_353_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1129_1_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1129_3_fu_367_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lum_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1144_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1144_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1144_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1144_2_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1144_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1144_3_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_465_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1147_fu_472_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1147_2_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1147_fu_484_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1147_3_fu_490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1147_1_fu_476_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1147_1_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1_fu_510_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1148_fu_517_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1148_2_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1148_fu_529_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1148_3_fu_535_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1148_1_fu_521_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1148_1_fu_539_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln2_fu_555_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1149_fu_562_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1149_2_fu_570_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1149_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1149_3_fu_580_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1149_1_fu_566_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1149_1_fu_584_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln1144_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1144_1_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv3_i_i188669_fu_648_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv3_i_i671_fu_638_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv3_i_i79670_fu_643_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_526 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_demosaic_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component design_1_v_demosaic_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    p_0_0_0480_1667_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_0_0_0480_1667_fu_126 <= p_0_0_0477655_lcssa668693;
                elsif ((ap_const_boolean_1 = ap_condition_526)) then 
                    p_0_0_0480_1667_fu_126 <= imgRgb_dout(19 downto 10);
                end if;
            end if; 
        end if;
    end process;

    p_0_0_0481_1665_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_0_0_0481_1665_fu_122 <= p_0_0_0478653_lcssa666691;
                elsif ((ap_const_boolean_1 = ap_condition_526)) then 
                    p_0_0_0481_1665_fu_122 <= trunc_ln1109_fu_255_p1;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_0482_1663_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_0_0_0482_1663_fu_118 <= p_0_0_0479657_lcssa664689;
                elsif ((ap_const_boolean_1 = ap_condition_526)) then 
                    p_0_0_0482_1663_fu_118 <= imgRgb_dout(29 downto 20);
                end if;
            end if; 
        end if;
    end process;

    p_0_0_0483_1662_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_0_0_0483_1662_fu_114 <= conv2_i_i_lcssa687;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_0_0_0483_1662_fu_114 <= lum_fu_401_p2(9 downto 3);
                end if;
            end if; 
        end if;
    end process;

    x_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1101_fu_217_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_110 <= x_2_fu_223_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_110 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1101_reg_718 <= icmp_ln1101_fu_217_p2;
                icmp_ln1101_reg_718_pp0_iter1_reg <= icmp_ln1101_reg_718;
                icmp_ln1107_reg_722 <= icmp_ln1107_fu_229_p2;
                icmp_ln1159_reg_726 <= icmp_ln1159_fu_235_p2;
                icmp_ln1159_reg_726_pp0_iter1_reg <= icmp_ln1159_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                b_s_reg_764 <= add_ln1149_1_fu_584_p2(11 downto 2);
                g_s_reg_759 <= add_ln1148_1_fu_539_p2(11 downto 2);
                icmp_ln1159_reg_726_pp0_iter2_reg <= icmp_ln1159_reg_726_pp0_iter1_reg;
                or_ln1144_reg_769 <= or_ln1144_fu_600_p2;
                p_0_0_0480_1667_load_reg_746_pp0_iter2_reg <= p_0_0_0480_1667_load_reg_746;
                p_0_0_0481_1665_load_reg_738_pp0_iter2_reg <= p_0_0_0481_1665_load_reg_738;
                p_0_0_0482_1663_load_reg_730_pp0_iter2_reg <= p_0_0_0482_1663_load_reg_730;
                r_s_reg_754 <= add_ln1147_1_fu_494_p2(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_0_0_0480_1667_load_reg_746 <= p_0_0_0480_1667_fu_126;
                p_0_0_0481_1665_load_reg_738 <= p_0_0_0481_1665_fu_122;
                p_0_0_0482_1663_load_reg_730 <= p_0_0_0482_1663_fu_118;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1129_1_fu_395_p2 <= std_logic_vector(unsigned(zext_ln1129_fu_391_p1) + unsigned(zext_ln1129_2_fu_353_p1));
    add_ln1129_fu_385_p2 <= std_logic_vector(unsigned(zext_ln1129_4_fu_381_p1) + unsigned(zext_ln1129_1_fu_339_p1));
    add_ln1147_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln1147_3_fu_490_p1) + unsigned(zext_ln1147_1_fu_476_p1));
    add_ln1147_fu_484_p2 <= std_logic_vector(unsigned(zext_ln1147_fu_472_p1) + unsigned(zext_ln1147_2_fu_480_p1));
    add_ln1148_1_fu_539_p2 <= std_logic_vector(unsigned(zext_ln1148_3_fu_535_p1) + unsigned(zext_ln1148_1_fu_521_p1));
    add_ln1148_fu_529_p2 <= std_logic_vector(unsigned(zext_ln1148_fu_517_p1) + unsigned(zext_ln1148_2_fu_525_p1));
    add_ln1149_1_fu_584_p2 <= std_logic_vector(unsigned(zext_ln1149_3_fu_580_p1) + unsigned(zext_ln1149_1_fu_566_p1));
    add_ln1149_fu_574_p2 <= std_logic_vector(unsigned(zext_ln1149_fu_562_p1) + unsigned(zext_ln1149_2_fu_570_p1));
    and_ln1144_1_fu_459_p2 <= (xor_ln1144_1_fu_447_p2 and icmp_ln1144_3_fu_453_p2);
    and_ln1144_fu_435_p2 <= (xor_ln1144_fu_429_p2 and icmp_ln1144_fu_417_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(imgRgb_empty_n, ap_predicate_op40_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op40_read_state2 = ap_const_boolean_1) and (imgRgb_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(imgUnzip_full_n, icmp_ln1159_reg_726_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln1159_reg_726_pp0_iter2_reg = ap_const_lv1_0) and (imgUnzip_full_n = ap_const_logic_0));
    end process;


    ap_condition_526_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1101_reg_718, icmp_ln1107_reg_722)
    begin
                ap_condition_526 <= ((icmp_ln1107_reg_722 = ap_const_lv1_1) and (icmp_ln1101_reg_718 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1101_fu_217_p2)
    begin
        if (((icmp_ln1101_fu_217_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1101_reg_718, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1101_reg_718 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter2_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op40_read_state2_assign_proc : process(icmp_ln1101_reg_718, icmp_ln1107_reg_722)
    begin
                ap_predicate_op40_read_state2 <= ((icmp_ln1107_reg_722 = ap_const_lv1_1) and (icmp_ln1101_reg_718 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_1 <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_110;
        end if; 
    end process;

    conv3_i_i188669_fu_648_p3 <= 
        r_s_reg_754 when (or_ln1144_reg_769(0) = '1') else 
        p_0_0_0482_1663_load_reg_730_pp0_iter2_reg;
    conv3_i_i671_fu_638_p3 <= 
        b_s_reg_764 when (or_ln1144_reg_769(0) = '1') else 
        p_0_0_0480_1667_load_reg_746_pp0_iter2_reg;
    conv3_i_i79670_fu_643_p3 <= 
        g_s_reg_759 when (or_ln1144_reg_769(0) = '1') else 
        p_0_0_0481_1665_load_reg_738_pp0_iter2_reg;
    icmp_ln1101_fu_217_p2 <= "1" when (ap_sig_allocacmp_x_1 = loopWidth) else "0";
    icmp_ln1107_fu_229_p2 <= "1" when (unsigned(ap_sig_allocacmp_x_1) < unsigned(zext_ln1085_cast_fu_179_p1)) else "0";
    icmp_ln1144_1_fu_423_p2 <= "1" when (unsigned(p_0_0_0483_1662_fu_114) < unsigned(trunc_ln1_fu_407_p4)) else "0";
    icmp_ln1144_2_fu_441_p2 <= "1" when (unsigned(p_0_0_0483_1658_out_i) < unsigned(zext_ln1101_fu_297_p1)) else "0";
    icmp_ln1144_3_fu_453_p2 <= "1" when (unsigned(p_0_0_0483_1662_fu_114) < unsigned(trunc_ln1_fu_407_p4)) else "0";
    icmp_ln1144_fu_417_p2 <= "1" when (unsigned(p_0_0_0483_1658_out_i) < unsigned(zext_ln1101_fu_297_p1)) else "0";
    icmp_ln1159_fu_235_p2 <= "1" when (ap_sig_allocacmp_x_1 = ap_const_lv17_0) else "0";

    imgRgb_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, imgRgb_empty_n, ap_predicate_op40_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgRgb_blk_n <= imgRgb_empty_n;
        else 
            imgRgb_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgRgb_read <= imgRgb_read_local;

    imgRgb_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op40_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgRgb_read_local <= ap_const_logic_1;
        else 
            imgRgb_read_local <= ap_const_logic_0;
        end if; 
    end process;


    imgUnzip_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, imgUnzip_full_n, icmp_ln1159_reg_726_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1159_reg_726_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imgUnzip_blk_n <= imgUnzip_full_n;
        else 
            imgUnzip_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgUnzip_din <= or_ln1161_3_fu_653_p4;
    imgUnzip_write <= imgUnzip_write_local;

    imgUnzip_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1159_reg_726_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1159_reg_726_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imgUnzip_write_local <= ap_const_logic_1;
        else 
            imgUnzip_write_local <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1129_1_fu_343_p4 <= p_0_0_0481_1665_fu_122(9 downto 1);
    lshr_ln1129_2_fu_357_p4 <= p_0_0_0481_1665_fu_122(9 downto 3);
    lum_fu_401_p2 <= std_logic_vector(unsigned(add_ln1129_1_fu_395_p2) + unsigned(zext_ln1129_3_fu_367_p1));
    or_ln1144_fu_600_p2 <= (and_ln1144_fu_435_p2 or and_ln1144_1_fu_459_p2);
    or_ln1161_3_fu_653_p4 <= ((conv3_i_i188669_fu_648_p3 & conv3_i_i671_fu_638_p3) & conv3_i_i79670_fu_643_p3);

    p_0_0_0480_1661_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, p_0_0_0480_1661_out_i, ap_block_pp0_stage0, p_0_0_0480_1667_load_reg_746)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0480_1661_out_o <= p_0_0_0480_1667_load_reg_746;
        else 
            p_0_0_0480_1661_out_o <= p_0_0_0480_1661_out_i;
        end if; 
    end process;


    p_0_0_0480_1661_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0480_1661_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0480_1661_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_0480_1667_out <= p_0_0_0480_1667_load_reg_746;

    p_0_0_0480_1667_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1101_reg_718_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (icmp_ln1101_reg_718_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_0_0_0480_1667_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0480_1667_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_0_0481_1660_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, p_0_0_0481_1660_out_i, ap_block_pp0_stage0, p_0_0_0481_1665_load_reg_738)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0481_1660_out_o <= p_0_0_0481_1665_load_reg_738;
        else 
            p_0_0_0481_1660_out_o <= p_0_0_0481_1660_out_i;
        end if; 
    end process;


    p_0_0_0481_1660_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0481_1660_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0481_1660_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_0481_1665_out <= p_0_0_0481_1665_load_reg_738;

    p_0_0_0481_1665_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1101_reg_718_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (icmp_ln1101_reg_718_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_0_0_0481_1665_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0481_1665_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_0_0482_1659_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, p_0_0_0482_1659_out_i, ap_block_pp0_stage0, p_0_0_0482_1663_load_reg_730)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0482_1659_out_o <= p_0_0_0482_1663_load_reg_730;
        else 
            p_0_0_0482_1659_out_o <= p_0_0_0482_1659_out_i;
        end if; 
    end process;


    p_0_0_0482_1659_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0482_1659_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0482_1659_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_0482_1663_out <= p_0_0_0482_1663_load_reg_730;

    p_0_0_0482_1663_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1101_reg_718_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (icmp_ln1101_reg_718_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_0_0_0482_1663_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0482_1663_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_0_0483_1658_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, p_0_0_0483_1658_out_i, ap_block_pp0_stage0, zext_ln1101_fu_297_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0483_1658_out_o <= zext_ln1101_fu_297_p1;
        else 
            p_0_0_0483_1658_out_o <= p_0_0_0483_1658_out_i;
        end if; 
    end process;


    p_0_0_0483_1658_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_0_0_0483_1658_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0483_1658_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    phi_ln1132_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_loop_init, lum_fu_401_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                phi_ln1132_out <= ap_const_lv7_0;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                phi_ln1132_out <= lum_fu_401_p2(9 downto 3);
            else 
                phi_ln1132_out <= "XXXXXXX";
            end if;
        else 
            phi_ln1132_out <= "XXXXXXX";
        end if; 
    end process;


    phi_ln1132_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            phi_ln1132_out_ap_vld <= ap_const_logic_1;
        else 
            phi_ln1132_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_510_p3 <= (p_0_0_0481_1665_load_reg_738 & ap_const_lv1_0);
    shl_ln2_fu_555_p3 <= (p_0_0_0480_1667_load_reg_746 & ap_const_lv1_0);
    shl_ln_fu_465_p3 <= (p_0_0_0482_1663_load_reg_730 & ap_const_lv1_0);
    tmp_1_fu_371_p4 <= p_0_0_0480_1667_fu_126(9 downto 3);
    tmp_fu_329_p4 <= p_0_0_0482_1663_fu_118(9 downto 2);
    trunc_ln1109_fu_255_p1 <= imgRgb_dout(10 - 1 downto 0);
    trunc_ln1_fu_407_p4 <= lum_fu_401_p2(9 downto 3);
    x_2_fu_223_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_1) + unsigned(ap_const_lv17_1));
    xor_ln1144_1_fu_447_p2 <= (icmp_ln1144_2_fu_441_p2 xor ap_const_lv1_1);
    xor_ln1144_fu_429_p2 <= (icmp_ln1144_1_fu_423_p2 xor ap_const_lv1_1);
    zext_ln1085_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1085),17));
    zext_ln1101_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0483_1662_fu_114),10));
    zext_ln1129_1_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_329_p4),9));
    zext_ln1129_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1129_1_fu_343_p4),10));
    zext_ln1129_3_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1129_2_fu_357_p4),10));
    zext_ln1129_4_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_371_p4),9));
    zext_ln1129_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1129_fu_385_p2),10));
    zext_ln1147_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_465_p3),12));
    zext_ln1147_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0482_1659_out_i),11));
    zext_ln1147_3_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1147_fu_484_p2),12));
    zext_ln1147_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0482_1663_fu_118),11));
    zext_ln1148_1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_510_p3),12));
    zext_ln1148_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0481_1660_out_i),11));
    zext_ln1148_3_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1148_fu_529_p2),12));
    zext_ln1148_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0481_1665_fu_122),11));
    zext_ln1149_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_555_p3),12));
    zext_ln1149_2_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0480_1661_out_i),11));
    zext_ln1149_3_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1149_fu_574_p2),12));
    zext_ln1149_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0480_1667_fu_126),11));
end behav;
