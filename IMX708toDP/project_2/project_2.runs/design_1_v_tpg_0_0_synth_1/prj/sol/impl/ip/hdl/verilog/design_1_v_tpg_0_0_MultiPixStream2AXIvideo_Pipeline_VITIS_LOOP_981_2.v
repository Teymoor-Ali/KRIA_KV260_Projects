// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_981_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sof,
        empty,
        cols,
        fid_in_val9_load,
        fid,
        fid_ap_vld,
        ovrlayYUV_dout,
        ovrlayYUV_num_data_valid,
        ovrlayYUV_fifo_cap,
        ovrlayYUV_empty_n,
        ovrlayYUV_read,
        colorFormat_val20_load,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        field_id_val8_load,
        sub_i,
        counter_loc_1_i_out_i,
        counter_loc_1_i_out_o,
        counter_loc_1_i_out_o_ap_vld,
        p_phi_i_out,
        p_phi_i_out_ap_vld,
        counter,
        counter_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] sof;
input  [0:0] empty;
input  [10:0] cols;
input  [0:0] fid_in_val9_load;
output  [0:0] fid;
output   fid_ap_vld;
input  [29:0] ovrlayYUV_dout;
input  [4:0] ovrlayYUV_num_data_valid;
input  [4:0] ovrlayYUV_fifo_cap;
input   ovrlayYUV_empty_n;
output   ovrlayYUV_read;
input  [7:0] colorFormat_val20_load;
output  [31:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [3:0] m_axis_video_TKEEP;
output  [3:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] field_id_val8_load;
input  [11:0] sub_i;
input  [15:0] counter_loc_1_i_out_i;
output  [15:0] counter_loc_1_i_out_o;
output   counter_loc_1_i_out_o_ap_vld;
output  [0:0] p_phi_i_out;
output   p_phi_i_out_ap_vld;
output  [15:0] counter;
output   counter_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] fid;
reg fid_ap_vld;
reg m_axis_video_TVALID;
reg[15:0] counter_loc_1_i_out_o;
reg counter_loc_1_i_out_o_ap_vld;
reg p_phi_i_out_ap_vld;
reg counter_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ovrlayYUV_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln981_reg_548;
reg    m_axis_video_TDATA_blk_n;
reg   [0:0] sof_2_reg_241;
reg   [0:0] p_phi_i_reg_253;
wire   [15:0] field_id_val8_load_read_read_fu_154_p2;
wire   [0:0] icmp_ln981_fu_293_p2;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] axi_last_fu_308_p2;
reg   [0:0] axi_last_reg_552;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [0:0] ap_phi_mux_sof_2_phi_fu_245_p4;
reg   [0:0] ap_phi_mux_empty_189_phi_fu_270_p10;
wire   [0:0] ap_phi_reg_pp0_iter0_empty_189_reg_264;
reg   [0:0] ap_phi_reg_pp0_iter1_empty_189_reg_264;
wire   [0:0] fid_toggle_fu_344_p1;
wire   [0:0] fid_toggle_1_fu_497_p2;
wire   [15:0] add_ln1005_fu_317_p2;
reg   [10:0] j_fu_144;
wire   [10:0] j_2_fu_298_p2;
reg    ap_block_pp0_stage0_01001;
reg    ovrlayYUV_read_local;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln981_fu_304_p1;
wire   [9:0] pix_444_fu_350_p1;
wire   [9:0] pix_rgb_2_fu_354_p4;
wire   [0:0] icmp_ln1020_fu_390_p2;
wire   [0:0] icmp_ln1020_1_fu_395_p2;
wire   [10:0] axi_data_fu_374_p3;
wire   [10:0] axi_data_2_fu_408_p4;
wire   [10:0] axi_data_2_fu_408_p7;
wire   [1:0] sel_tmp6_fu_400_p3;
wire   [10:0] axi_data_2_fu_408_p9;
wire   [9:0] tmp_fu_432_p2;
wire   [9:0] tmp_fu_432_p4;
wire   [9:0] tmp_fu_432_p6;
wire   [9:0] tmp_fu_432_p7;
wire   [9:0] tmp_s_fu_452_p2;
wire   [9:0] tmp_s_fu_452_p6;
wire   [9:0] tmp_s_fu_452_p7;
wire   [9:0] tmp_s_fu_452_p9;
wire   [9:0] tmp_fu_432_p9;
wire  signed [29:0] sext_ln925_fu_428_p1;
wire   [19:0] tmp_1_fu_472_p3;
wire   [29:0] axi_data_3_fu_480_p5;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_161;
reg    ap_condition_137;
reg    ap_condition_362;
reg    ap_condition_365;
reg    ap_condition_368;
reg    ap_condition_371;
reg    ap_condition_374;
wire  signed [1:0] axi_data_2_fu_408_p1;
wire   [1:0] axi_data_2_fu_408_p3;
wire   [1:0] axi_data_2_fu_408_p5;
wire  signed [1:0] tmp_fu_432_p1;
wire   [1:0] tmp_fu_432_p3;
wire   [1:0] tmp_fu_432_p5;
wire  signed [1:0] tmp_s_fu_452_p1;
wire   [1:0] tmp_s_fu_452_p3;
wire   [1:0] tmp_s_fu_452_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 j_fu_144 = 11'd0;
end

(* dissolve_hierarchy = "yes" *) design_1_v_tpg_0_0_sparsemux_7_2_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 11 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 11 ))
sparsemux_7_2_11_1_1_U255(
    .din0(axi_data_fu_374_p3),
    .din1(axi_data_2_fu_408_p4),
    .din2(axi_data_fu_374_p3),
    .def(axi_data_2_fu_408_p7),
    .sel(sel_tmp6_fu_400_p3),
    .dout(axi_data_2_fu_408_p9)
);

(* dissolve_hierarchy = "yes" *) design_1_v_tpg_0_0_sparsemux_7_2_10_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 10 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 10 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 10 ),
    .def_WIDTH( 10 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
sparsemux_7_2_10_1_1_x_U256(
    .din0(tmp_fu_432_p2),
    .din1(tmp_fu_432_p4),
    .din2(tmp_fu_432_p6),
    .def(tmp_fu_432_p7),
    .sel(sel_tmp6_fu_400_p3),
    .dout(tmp_fu_432_p9)
);

(* dissolve_hierarchy = "yes" *) design_1_v_tpg_0_0_sparsemux_7_2_10_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 10 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 10 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 10 ),
    .def_WIDTH( 10 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
sparsemux_7_2_10_1_1_x_U257(
    .din0(tmp_s_fu_452_p2),
    .din1(pix_444_fu_350_p1),
    .din2(tmp_s_fu_452_p6),
    .def(tmp_s_fu_452_p7),
    .sel(sel_tmp6_fu_400_p3),
    .dout(tmp_s_fu_452_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        if ((1'b1 == ap_condition_161)) begin
            ap_phi_reg_pp0_iter1_empty_189_reg_264 <= fid_in_val9_load;
        end else if (((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd2))) begin
            ap_phi_reg_pp0_iter1_empty_189_reg_264 <= 1'd1;
        end else if (((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd0))) begin
            ap_phi_reg_pp0_iter1_empty_189_reg_264 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_189_reg_264 <= ap_phi_reg_pp0_iter0_empty_189_reg_264;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_144 <= 11'd0;
    end else if (((icmp_ln981_fu_293_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_fu_144 <= j_2_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_phi_i_reg_253 <= ap_phi_mux_empty_189_phi_fu_270_p10;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_phi_i_reg_253 <= empty;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sof_2_reg_241 <= 1'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sof_2_reg_241 <= sof;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_last_reg_552 <= axi_last_fu_308_p2;
        icmp_ln981_reg_548 <= icmp_ln981_fu_293_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln981_fu_293_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln981_reg_548 == 1'd0)) begin
        if ((field_id_val8_load_read_read_fu_154_p2 == 16'd3)) begin
            ap_phi_mux_empty_189_phi_fu_270_p10 = fid_toggle_1_fu_497_p2;
        end else if ((field_id_val8_load_read_read_fu_154_p2 == 16'd1)) begin
            ap_phi_mux_empty_189_phi_fu_270_p10 = fid_toggle_fu_344_p1;
        end else begin
            ap_phi_mux_empty_189_phi_fu_270_p10 = ap_phi_reg_pp0_iter1_empty_189_reg_264;
        end
    end else begin
        ap_phi_mux_empty_189_phi_fu_270_p10 = ap_phi_reg_pp0_iter1_empty_189_reg_264;
    end
end

always @ (*) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_sof_2_phi_fu_245_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_2_phi_fu_245_p4 = sof_2_reg_241;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln981_fu_293_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_sof_2_phi_fu_245_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_ap_vld = 1'b1;
    end else begin
        counter_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln981_fu_293_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_sof_2_phi_fu_245_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_loc_1_i_out_o = add_ln1005_fu_317_p2;
    end else begin
        counter_loc_1_i_out_o = counter_loc_1_i_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln981_fu_293_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_sof_2_phi_fu_245_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_loc_1_i_out_o_ap_vld = 1'b1;
    end else begin
        counter_loc_1_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_374)) begin
            fid = fid_toggle_fu_344_p1;
        end else if ((1'b1 == ap_condition_371)) begin
            fid = fid_toggle_1_fu_497_p2;
        end else if ((1'b1 == ap_condition_368)) begin
            fid = fid_in_val9_load;
        end else if ((1'b1 == ap_condition_365)) begin
            fid = 1'd0;
        end else if ((1'b1 == ap_condition_362)) begin
            fid = 1'd1;
        end else begin
            fid = 'bx;
        end
    end else begin
        fid = 'bx;
    end
end

always @ (*) begin
    if (((~(field_id_val8_load_read_read_fu_154_p2 == 16'd3) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd2) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd1) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd0) & (icmp_ln981_fu_293_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((field_id_val8_load_read_read_fu_154_p2 == 16'd3) & (icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((field_id_val8_load_read_read_fu_154_p2 == 16'd1) & (icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd0) & (1'b0 
    == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        fid_ap_vld = 1'b1;
    end else begin
        fid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ovrlayYUV_blk_n = ovrlayYUV_empty_n;
    end else begin
        ovrlayYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln981_reg_548 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ovrlayYUV_read_local = 1'b1;
    end else begin
        ovrlayYUV_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_phi_i_out_ap_vld = 1'b1;
    end else begin
        p_phi_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln981_fu_293_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln981_fu_293_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1005_fu_317_p2 = (counter_loc_1_i_out_i + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln981_reg_548 == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln981_reg_548 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln981_reg_548 == 1'd0) & (ovrlayYUV_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_161 = (~(field_id_val8_load_read_read_fu_154_p2 == 16'd3) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd2) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd1) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd0) & (icmp_ln981_fu_293_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_362 = ((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_365 = ((icmp_ln981_fu_293_p2 == 1'd0) & (field_id_val8_load_read_read_fu_154_p2 == 16'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_368 = (~(field_id_val8_load_read_read_fu_154_p2 == 16'd3) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd2) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd1) & ~(field_id_val8_load_read_read_fu_154_p2 == 16'd0) & (icmp_ln981_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_371 = ((field_id_val8_load_read_read_fu_154_p2 == 16'd3) & (icmp_ln981_reg_548 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_374 = ((field_id_val8_load_read_read_fu_154_p2 == 16'd1) & (icmp_ln981_reg_548 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_189_reg_264 = 'bx;

assign axi_data_2_fu_408_p4 = {{1'd1}, {pix_rgb_2_fu_354_p4}};

assign axi_data_2_fu_408_p7 = 'bx;

assign axi_data_3_fu_480_p5 = {{tmp_1_fu_472_p3}, {sext_ln925_fu_428_p1[9:0]}};

assign axi_data_fu_374_p3 = {{1'd1}, {pix_444_fu_350_p1}};

assign axi_last_fu_308_p2 = ((zext_ln981_fu_304_p1 == sub_i) ? 1'b1 : 1'b0);

assign counter = (counter_loc_1_i_out_i + 16'd1);

assign fid_toggle_1_fu_497_p2 = (fid_toggle_fu_344_p1 ^ 1'd1);

assign fid_toggle_fu_344_p1 = counter_loc_1_i_out_i[0:0];

assign field_id_val8_load_read_read_fu_154_p2 = field_id_val8_load;

assign icmp_ln1020_1_fu_395_p2 = ((colorFormat_val20_load == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1020_fu_390_p2 = ((colorFormat_val20_load == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln981_fu_293_p2 = ((j_fu_144 == cols) ? 1'b1 : 1'b0);

assign j_2_fu_298_p2 = (j_fu_144 + 11'd1);

assign m_axis_video_TDATA = axi_data_3_fu_480_p5;

assign m_axis_video_TDEST = 'bx;

assign m_axis_video_TID = 'bx;

assign m_axis_video_TKEEP = 4'd15;

assign m_axis_video_TLAST = axi_last_reg_552;

assign m_axis_video_TSTRB = 'bx;

assign m_axis_video_TUSER = sof_2_reg_241;

assign ovrlayYUV_read = ovrlayYUV_read_local;

assign p_phi_i_out = p_phi_i_reg_253;

assign pix_444_fu_350_p1 = ovrlayYUV_dout[9:0];

assign pix_rgb_2_fu_354_p4 = {{ovrlayYUV_dout[19:10]}};

assign sel_tmp6_fu_400_p3 = {{icmp_ln1020_fu_390_p2}, {icmp_ln1020_1_fu_395_p2}};

assign sext_ln925_fu_428_p1 = $signed(axi_data_2_fu_408_p9);

assign tmp_1_fu_472_p3 = {{tmp_s_fu_452_p9}, {tmp_fu_432_p9}};

assign tmp_fu_432_p2 = {{ovrlayYUV_dout[19:10]}};

assign tmp_fu_432_p4 = {{ovrlayYUV_dout[29:20]}};

assign tmp_fu_432_p6 = {{ovrlayYUV_dout[19:10]}};

assign tmp_fu_432_p7 = 'bx;

assign tmp_s_fu_452_p2 = {{ovrlayYUV_dout[29:20]}};

assign tmp_s_fu_452_p6 = {{ovrlayYUV_dout[29:20]}};

assign tmp_s_fu_452_p7 = 'bx;

assign zext_ln981_fu_304_p1 = j_fu_144;

endmodule //design_1_v_tpg_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_981_2
